From: Randy Baumgarte <randy@fbn.cx>
Date: Mon, 20 Feb 2017 14:31:02 -0500
Subject: Add multiple search paths for plugins.
Forwarded: not-needed

---
 gui/nbrowserwindow.cpp | 41 +++++++++++++++++++-------------
 nixnote.cpp            | 63 ++++++++++++++++++++++++++++----------------------
 2 files changed, 61 insertions(+), 43 deletions(-)

diff --git a/gui/nbrowserwindow.cpp b/gui/nbrowserwindow.cpp
index e2974ae..091db92 100644
--- a/gui/nbrowserwindow.cpp
+++ b/gui/nbrowserwindow.cpp
@@ -3541,23 +3541,32 @@ void NBrowserWindow::setEditorStyle() {
 void NBrowserWindow::loadPlugins() {
     hunspellPluginAvailable = false;
 
-    // Start loading plugins
-    QDir pluginsDir(global.fileManager.getProgramDirPath(""));
-    pluginsDir.cd("plugins");
-    QStringList filter;
-    filter.append("libhunspellplugin.so");
-    foreach (QString fileName, pluginsDir.entryList(filter)) {
-        QPluginLoader pluginLoader(pluginsDir.absoluteFilePath(fileName));
-        QObject *plugin = pluginLoader.instance();
-        if (fileName == "libhunspellplugin.so") {
-            if (plugin) {
-                hunspellInterface = qobject_cast<HunspellInterface *>(plugin);
-                if (hunspellInterface) {
-                    hunspellPluginAvailable = true;
-                    hunspellInterface->initialize(global.fileManager.getProgramDirPath(""), global.fileManager.getSpellDirPathUser());
+    QStringList dirList;
+    dirList.append(global.fileManager.getProgramDirPath(""));
+    dirList.append(global.fileManager.getProgramDirPath("")+"/plugins");
+    dirList.append("/usr/lib/nixnote2/");
+    dirList.append("/usr/local/lib/nixnote2/");
+    dirList.append("/usr/local/lib");
+    dirList.append("/usr/lib");
+
+    for (int i=0; i<dirList.size(); i++) {
+        // Start loading plugins
+        QDir pluginsDir(dirList[i]);
+        QStringList filter;
+        filter.append("libhunspellplugin.so");
+        foreach (QString fileName, pluginsDir.entryList(filter)) {
+            QPluginLoader pluginLoader(pluginsDir.absoluteFilePath(fileName));
+            QObject *plugin = pluginLoader.instance();
+            if (fileName == "libhunspellplugin.so") {
+                if (plugin) {
+                    hunspellInterface = qobject_cast<HunspellInterface *>(plugin);
+                    if (hunspellInterface) {
+                        hunspellPluginAvailable = true;
+                        hunspellInterface->initialize(global.fileManager.getProgramDirPath(""), global.fileManager.getSpellDirPathUser());
+                    }
+                } else {
+                    QLOG_ERROR() << pluginLoader.errorString();
                 }
-            } else {
-                QLOG_ERROR() << pluginLoader.errorString();
             }
         }
     }
diff --git a/nixnote.cpp b/nixnote.cpp
index 12d98c2..6a9cc79 100644
--- a/nixnote.cpp
+++ b/nixnote.cpp
@@ -3802,38 +3802,47 @@ void NixNote::presentationModeOff() {
 void NixNote::loadPlugins() {
     webcamPluginAvailable = false;
 
+    QStringList dirList;
+    dirList.append(global.fileManager.getProgramDirPath(""));
+    dirList.append(global.fileManager.getProgramDirPath("")+"/plugins");
+    dirList.append("/usr/lib/nixnote2/");
+    dirList.append("/usr/local/lib/nixnote2/");
+    dirList.append("/usr/local/lib");
+    dirList.append("/usr/lib");
+
     // Start loading plugins
-    QDir pluginsDir(global.fileManager.getProgramDirPath(""));
-    pluginsDir.cd("plugins");
-    QStringList filter;
-    filter.append("libwebcamplugin.so");
-    filter.append("libhunspellplugin.so");
-    foreach (QString fileName, pluginsDir.entryList(filter)) {
-        QPluginLoader pluginLoader(pluginsDir.absoluteFilePath(fileName));
-        QObject *plugin = pluginLoader.instance();
-        if (fileName == "libwebcamplugin.so") {
-            if (plugin) {
-                webcamInterface = qobject_cast<WebCamInterface *>(plugin);
-                if (webcamInterface) {
-                    webcamPluginAvailable = true;
+    for (int i=0; i<dirList.size(); i++) {
+        QDir pluginsDir(dirList[i]);
+        QStringList filter;
+        filter.append("libwebcamplugin.so");
+        filter.append("libhunspellplugin.so");
+        foreach (QString fileName, pluginsDir.entryList(filter)) {
+            QPluginLoader pluginLoader(pluginsDir.absoluteFilePath(fileName));
+            QObject *plugin = pluginLoader.instance();
+            if (fileName == "libwebcamplugin.so") {
+                if (plugin) {
+                    webcamInterface = qobject_cast<WebCamInterface *>(plugin);
+                    if (webcamInterface) {
+                        webcamPluginAvailable = true;
+                    }
+                } else {
+                    QLOG_ERROR() << tr("Error loading Webcam plugin: ") << pluginLoader.errorString();
                 }
-            } else {
-                QLOG_ERROR() << tr("Error loading Webcam plugin: ") << pluginLoader.errorString();
             }
-        }
 
-        // The Hunspell plugin isn't actually used here. We just use this as a
-        // check to be sure that the menu should be available.
-        if (fileName == "libhunspellplugin.so") {
-            if (plugin) {
-                HunspellInterface *hunspellInterface;
-                hunspellInterface = qobject_cast<HunspellInterface *>(plugin);
-                if (hunspellInterface) {
-                    hunspellPluginAvailable = true;
+            // The Hunspell plugin isn't actually used here. We just use this as a
+            // check to be sure that the menu should be available.
+            if (fileName == "libhunspellplugin.so") {
+                if (plugin) {
+                    HunspellInterface *hunspellInterface;
+                    hunspellInterface = qobject_cast<HunspellInterface *>(plugin);
+                    if (hunspellInterface) {
+                        hunspellPluginAvailable = true;
+                    }
+                    delete hunspellInterface;
+                } else {
+                    QLOG_ERROR() << tr("Error loading Hunspell plugin: ") << pluginLoader.errorString();
                 }
-                delete hunspellInterface;
-            } else {
-                QLOG_ERROR() << tr("Error loading Hunspell plugin: ") << pluginLoader.errorString();
             }
         }
     }
